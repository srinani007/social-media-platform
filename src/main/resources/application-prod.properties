# application-prod.properties
spring.application.name=social-media-platform

#  Database (Postgres via Render)
spring.datasource.url=${JDBC_DATABASE_URL}
spring.datasource.username=${JDBC_DATABASE_USERNAME}
spring.datasource.password=${JDBC_DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA / Migrations
spring.flyway.enabled=false
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Flyway locations (if you haven't already set this elsewhere)
# spring.flyway.locations=classpath:db/migration

#  Thymeleaf & error handling
spring.thymeleaf.cache=true
server.error.include-stacktrace=never

#  Web server port (bind to $PORT)
server.port=${PORT:8080}

#  Session timeout
server.servlet.session.timeout=30m

#  Security: NO embedded SSL in Render (edge TLS handles HTTPS)
# Remove any server.ssl.enabled or key-store properties here!

# Mail (via Gmail)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${GMAIL_USERNAME}
spring.mail.password=${GMAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# OAuth2 (Google)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=email
# Use the `{baseUrl}` placeholder, so you don't hard-code:
spring.security.oauth2.client.registration.google.redirect-uri-template={baseUrl}/login/oauth2/code/google

# PayPal (sandbox)
paypal.client.id=${PAYPAL_CLIENT_ID}
paypal.client.secret=${PAYPAL_CLIENT_SECRET}
paypal.mode=sandbox

#  Logging
logging.level.org.springframework=INFO
logging.level.com.prash=INFO

#  Disable H2 console in prod
spring.h2.console.enabled=false
spring.jpa.hibernate.ddl-auto=update

